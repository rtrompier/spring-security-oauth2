server:
  port: 8081

#security.oauth2.resource.id: a-service
#security.oauth2.resource.token-info-uri: ${rest.security.issuer-uri}/protocol/openid-connect/token/introspect
#security.oauth2.resource.user-info-uri: ${rest.security.issuer-uri}/protocol/openid-connect/userinfo
#security.oauth2.resource.jwk.key-set-uri: ${rest.security.issuer-uri}/protocol/openid-connect/certs

rest.security.issuer-uri: http://remy-trompier.ch:9000/auth/realms/test
rest.security.enabled: true

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${rest.security.issuer-uri}
      client:
        provider:
          keycloak:
            issuer-uri: ${rest.security.issuer-uri}
        registration:
          library-client:
            provider: keycloak
            client-id: a-service
            client-secret: d60395eb-b6ee-4d29-a824-c287fb20602d
            redirect-uri-template: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid, profile, email, offline_access

#            authorization-grant-type: client_credentials
#            client-authentication-method: basic
#            authorization-grant-type: authorization_code
#            client-name: keycloak

#            redirect-uri: http://localhost:8081
#            redirectUriTemplate: '{baseUrl}/login/oauth2/code/{registrationId}'
#            jwk-set-uri: ${rest.security.issuer-uri}/protocol/openid-connect/certs
#            authorization-uri: ${rest.security.issuer-uri}/protocol/openid-connect/auth
#            token-uri: ${rest.security.issuer-uri}/protocol/openid-connect/token
#            user-info-uri: ${rest.security.issuer-uri}/protocol/openid-connect/userinfo
#            user-name-attribute: preferred_username

logging:
  level:
    ROOT: DEBUG
    org.springframework.security: DEBUG 
    com.example.demo.config: DEBUG    
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    org.springframework.web.reactive.function.client.ExchangeFunctions: TRACE
    reactor.ipc.netty.channel.ChannelOperationsHandler: DEBUG
    reactor.ipc.netty.http.server.HttpServer: DEBUG
    reactor.ipc.netty.http.client: DEBUG
    io.reactivex.netty.protocol.http.client: DEBUG
    io.netty.handler: DEBUG
    io.netty.handler.proxy.HttpProxyHandler: DEBUG
    io.netty.handler.proxy.ProxyHandler: DEBUG
    org.springframework.web.reactive.function.client: DEBUG
    reactor.ipc.netty.channel: DEBUG

spring.http.log-request-details: true  